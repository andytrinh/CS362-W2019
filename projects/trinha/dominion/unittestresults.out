----------------- Unit Test 1: initalizeGame() ----------------
TEST 1: Checking for a game with 2 players
-----------------------------------------------------------
numPlayers = 2, actual = 2
~Checking for number of curse cards~
Curse cards: 10, actual: 10
~Checking for number of estate cards~
Estate cards: 8, actual: 8
~Checking for number of duchy cards~
Duchy cards: 8, actual: 8
~Checking for number of province cards~
Province cards: 8, actual: 8
-----------------------------------------------------------
TEST 2: Checking for a game with 3 players
-----------------------------------------------------------
numPlayers = 3, actual = 3
~Checking for number of curse cards~
Curse cards: 20, actual: 20
~Checking for number of estate cards~
Estate cards: 12, actual: 12
~Checking for number of duchy cards~
Duchy cards: 12, actual: 12
~Checking for number of province cards~
Province cards: 12, actual: 12
-----------------------------------------------------------
TEST 3: Checking for a game with 4 players
-----------------------------------------------------------
numPlayers = 4, actual = 4
~Checking for number of curse cards~
Curse cards: 30, actual: 30
~Checking for number of estate cards~
Estate cards: 12, actual: 12
~Checking for number of duchy cards~
Duchy cards: 12, actual: 12
~Checking for number of province cards~
Province cards: 12, actual: 12
----------------------END OF UNIT TEST 1-----------------------

----------------- Unit Test 2: numHandCards() ----------------
TEST 1: Checking for a correct number of cards in hand
-----------------------------------------------------------
numCards = 5, actual = 5
-----------------------------------------------------------
TEST 2: Checking for a correct number of cards in hand of other player
-----------------------------------------------------------
numCards = 5, actual = 5
----------------------END OF UNIT TEST 2-----------------------

----------------- Unit Test 3: getCost() ----------------
TEST 1: Check for cost of curse card
Expected: 0, Actual: 0
-----------------------------------------------------------
TEST 2: Check for cost of estate card
Expected: 2, Actual: 2
-----------------------------------------------------------
TEST 3: Check for cost of duchy card
Expected: 5, Actual: 5
-----------------------------------------------------------
TEST 4: Check for cost of province card
Expected: 8, Actual: 8
-----------------------------------------------------------
TEST 5: Check for cost of copper card
Expected: 0, Actual: 0
-----------------------------------------------------------
TEST 6: Check for cost of silver card
Expected: 3, Actual: 3
-----------------------------------------------------------
TEST 7: Check for cost of gold card
Expected: 6, Actual: 6
-----------------------------------------------------------
TEST 8: Check for cost of adventurer card
Expected: 6, Actual: 6
-----------------------------------------------------------
TEST 9: Check for cost of council_room card
Expected: 5, Actual: 5
-----------------------------------------------------------
TEST 10: Check for cost of feast card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 11: Check for cost of gardens card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 12: Check for cost of mine card
Expected: 5, Actual: 5
-----------------------------------------------------------
TEST 13: Check for cost of remodel card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 14: Check for cost of smithy card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 15: Check for cost of village card
Expected: 3, Actual: 3
-----------------------------------------------------------
TEST 16: Check for cost of baron card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 17: Check for cost of great_hall card
Expected: 3, Actual: 3
-----------------------------------------------------------
TEST 18: Check for cost of minion card
Expected: 5, Actual: 5
-----------------------------------------------------------
TEST 19: Check for cost of steward card
Expected: 3, Actual: 3
-----------------------------------------------------------
TEST 20: Check for cost of tribute card
Expected: 5, Actual: 5
-----------------------------------------------------------
TEST 21: Check for cost of ambassador card
Expected: 3, Actual: 3
-----------------------------------------------------------
TEST 22: Check for cost of cutpurse card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 23: Check for cost of embargo card
Expected: 2, Actual: 2
-----------------------------------------------------------
TEST 24: Check for cost of outpost card
Expected: 5, Actual: 5
-----------------------------------------------------------
TEST 25: Check for cost of salvager card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 26: Check for cost of sea_hag card
Expected: 4, Actual: 4
-----------------------------------------------------------
TEST 27: Check for cost of treasure_map card
Expected: 4, Actual: 4
----------------------END OF UNIT TEST 3-----------------------

----------------- Unit Test 4: supplyCount() ----------------
TEST 1: Check for number of feast card left in supply
Expected: 5, Actual: 5
-----------------------------------------------------------
TEST 2: Check for number of gold card left in supply
Expected: 3, Actual: 3
-----------------------------------------------------------
TEST 3: Check for number of silver card left in supply
Expected: 2, Actual: 2
-----------------------------------------------------------
----------------------END OF UNIT TEST 4-----------------------

----------------- CARD TEST 1: smithy ----------------
----------------- TEST 1: Check to see if 3 cards has been added----------------- 
hand count = 7, expected = 7
deck count = 2, expected = 2
coins = 4, expected = 4
----------------- TEST 2: Check to see that other player's values are unaffected----------------- 
hand count = 0, expected = 0
deck count = 10, expected = 10
coins = 4, expected = 4
----------------- TEST 3: Check for expected Kingdom cards----------------- 
kingdom card: 10, expected: 10
----------------- TEST 4: Check for expected Victory cards----------------- 
Duchy: 8, Expected: 8
Province: 8, Expected: 8
Estate: 8, Expected: 8
----------------------END OF CARD TEST 1-----------------------

----------------- CARD TEST 2: adventurer ----------------
----------------- TEST 1: Check for 2+ Treasure cards----------------- 
Treasure Card: 2 or more, Actual: 4
----------------- TEST 2: Check to see that other player's values are unaffected----------------- 
hand count = 0, expected = 0
deck count = 10, expected = 10
coins = 4, expected = 4
----------------- TEST 3: Check for expected Kingdom cards----------------- 
kingdom card: 10, expected: 10
----------------- TEST 4: Check for expected Victory cards----------------- 
Duchy: 8, Expected: 8
Province: 8, Expected: 8
Estate: 8, Expected: 8
----------------------END OF CARD TEST 2-----------------------

----------------- CARD TEST 3: village ----------------
----------------- TEST 1: Check to see if 1 card has been added----------------- 
hand count = 5, expected = 5
deck count = 4, expected = 4
coins = 4, expected = 4
----------------- TEST 2: Check to see if 2 action cards have been added----------------- 
Treasure Card: 2 or more, Actual: 4
----------------- TEST 3: Check to see that other player's values are unaffected----------------- 
hand count = 0, expected = 0
deck count = 10, expected = 10
coins = 4, expected = 4
----------------- TEST 4: Check for expected Kingdom cards----------------- 
kingdom card: 10, expected: 10
----------------- TEST 5: Check for expected Victory cards----------------- 
Duchy: 8, Expected: 8
Province: 8, Expected: 8
Estate: 8, Expected: 8
----------------------END OF CARD TEST 3-----------------------

File 'dominion.c'
Lines executed:33.63% of 559
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      315:    8:int compare(const void* a, const void* b) {
      315:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      315:   11:  if (*(int*)a < *(int*)b)
       84:   12:    return -1;
      231:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       21:  140:      state->deckCount[i] = 0;
       84:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       63:  143:	  state->deck[i][j] = estate;
       63:  144:	  state->deckCount[i]++;
        -:  145:	}
      168:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      147:  148:	  state->deck[i][j] = copper;
      147:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       21:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       21:  166:      state->handCount[i] = 0;
       21:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
       21:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       21:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       21:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       21:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      252:  214:  while (state->deckCount[player] > 0) {
      210:  215:    card = floor(Random() * state->deckCount[player]);
      210:  216:    newDeck[newDeckPos] = state->deck[player][card];
      210:  217:    newDeckPos++;
      734:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      524:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      210:  221:    state->deckCount[player]--;
        -:  222:  }
      231:  223:  for (i = 0; i < newDeckPos; i++) {
      210:  224:    state->deck[player][i] = newDeck[i];
      210:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       21:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
        2:  311:int numHandCards(struct gameState *state) {
        2:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        1:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        1:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
        6:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        5:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        1:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        1:  363:  if (currentPlayer < (state->numPlayers - 1)){
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        1:  370:  state->outpostPlayed = 0;
        1:  371:  state->phase = 0;
        1:  372:  state->numActions = 1;
        1:  373:  state->coins = 0;
        1:  374:  state->numBuys = 1;
        1:  375:  state->playedCardCount = 0;
        1:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
        6:  380:  for (k = 0; k < 5; k++){
        5:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        1:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        1:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       56:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       56:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       56:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       56:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       56:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       56:  576:    state->deckCount[player]--;
       56:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       56:  580:  return 0;
        -:  581:}
        -:  582:
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:int drawAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int cardDrawn, int z) {
        4:  647:      while(drawntreasure<2){
        -:  648:      //while(drawntreasure<3){
        2:  649:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:        shuffle(currentPlayer, state);
        -:  651:      }
        2:  652:      drawCard(currentPlayer, state);
        2:  653:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  654:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  655:        drawntreasure++;
        -:  656:      else{
    #####:  657:        temphand[z]=cardDrawn;
    #####:  658:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:        z++;
        -:  660:      }
        -:  661:      }
        2:  662:      while(z-1>=0){
    #####:  663:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  664:        z=z-1;
        -:  665:      }
        1:  666:      return 0;
        -:  667:}
        -:  668:
        1:  669:int drawSmithy(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:  //+3 Cards
        -:  671:  int i;
        -:  672:  //for (i = 1; i < 3; i++)
        4:  673:  for (i = 0; i < 3; i++)
        -:  674:  {
        3:  675:    drawCard(currentPlayer, state);
        -:  676:  }
        -:  677:
        -:  678:  //discard card from hand
        1:  679:  discardCard(handPos, currentPlayer, state, 0);
        1:  680:  return 0;
        -:  681:
        -:  682:}
        -:  683:
        1:  684:int drawVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  685:  //+1 Card
        1:  686:  drawCard(currentPlayer, state);
        -:  687:
        -:  688:  //+2 Actions
        -:  689:  //state->numActions = state->numActions + 2;
        1:  690:  state->numActions++;
        -:  691:
        -:  692:  //discard played card from hand
        1:  693:  discardCard(handPos, currentPlayer, state, 0);
        1:  694:  return 0;
        -:  695:}
        -:  696:
    #####:  697:int drawGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions++;
        -:  703:  //added a duplicate statement
    #####:  704:  state->numActions++;
        -:  705:  //discard card from hand
    #####:  706:  discardCard(handPos, currentPlayer, state, 0);
    #####:  707:  return 0;
        -:  708:}
        -:  709:
    #####:  710:int drawTreasureMap(int currentPlayer, struct gameState *state, int handPos, int index) {
        -:  711:  //search hand for another treasure_map
    #####:  712:  index = -1;
        -:  713:  int i;
    #####:  714:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  715:{
    #####:  716:if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -:  717:  {
    #####:  718:    index = i;
    #####:  719:    break;
        -:  720:  }
        -:  721:}
    #####:  722:  if (index > -1)
        -:  723:{
        -:  724://trash both treasure cards
    #####:  725:discardCard(handPos, currentPlayer, state, 1);
    #####:  726:discardCard(index, currentPlayer, state, 1);
        -:  727:
        -:  728://gain 4 Gold cards
    #####:  729:for (i = 0; i < 4; i++)
        -:  730:  {
    #####:  731:    gainCard(gold, state, 1, currentPlayer);
        -:  732:  }
        -:  733:
        -:  734://return success
    #####:  735:return 1;
        -:  736:}
        -:  737:
        -:  738:  //no second treasure_map found in hand
    #####:  739:  return -1;
        -:  740:}
        -:  741:
        3:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
        3:  749:  int currentPlayer = whoseTurn(state);
        3:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
        3:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
        3:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
        3:  756:  int z = 0;// this is the counter for the temp hand
        3:  757:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:
        -:  761:
        -:  762:  //uses switch to select card and perform actions
        3:  763:  switch( card )
        -:  764:    {
        -:  765:    case adventurer:
        1:  766:    return drawAdventurer(drawntreasure, state, currentPlayer, temphand, cardDrawn, z);
        -:  767:
        -:  768:    case council_room:
        -:  769:      //+4 Cards
    #####:  770:      for (i = 0; i < 4; i++)
        -:  771:	{
    #####:  772:	  drawCard(currentPlayer, state);
        -:  773:	}
        -:  774:
        -:  775:      //+1 Buy
    #####:  776:      state->numBuys++;
        -:  777:
        -:  778:      //Each other player draws a card
    #####:  779:      for (i = 0; i < state->numPlayers; i++)
        -:  780:	{
    #####:  781:	  if ( i != currentPlayer )
        -:  782:	    {
    #####:  783:	      drawCard(i, state);
        -:  784:	    }
        -:  785:	}
        -:  786:
        -:  787:      //put played card in played card pile
    #####:  788:      discardCard(handPos, currentPlayer, state, 0);
        -:  789:
    #####:  790:      return 0;
        -:  791:
        -:  792:    case feast:
        -:  793:      //gain card with cost up to 5
        -:  794:      //Backup hand
    #####:  795:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  796:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  797:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  798:      }
        -:  799:      //Backup hand
        -:  800:
        -:  801:      //Update Coins for Buy
    #####:  802:      updateCoins(currentPlayer, state, 5);
    #####:  803:      x = 1;//Condition to loop on
    #####:  804:      while( x == 1) {//Buy one card
    #####:  805:	if (supplyCount(choice1, state) <= 0){
        -:  806:	  if (DEBUG)
        -:  807:	    printf("None of that card left, sorry!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  811:	  }
        -:  812:	}
    #####:  813:	else if (state->coins < getCost(choice1)){
    #####:  814:	  printf("That card is too expensive!\n");
        -:  815:
        -:  816:	  if (DEBUG){
        -:  817:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  818:	  }
        -:  819:	}
        -:  820:	else{
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
    #####:  826:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  827:	  x = 0;//No more buying cards
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  831:	  }
        -:  832:
        -:  833:	}
        -:  834:      }
        -:  835:
        -:  836:      //Reset Hand
    #####:  837:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  838:	state->hand[currentPlayer][i] = temphand[i];
    #####:  839:	temphand[i] = -1;
        -:  840:      }
        -:  841:      //Reset Hand
        -:  842:
    #####:  843:      return 0;
        -:  844:
        -:  845:    case gardens:
    #####:  846:      return -1;
        -:  847:
        -:  848:    case mine:
    #####:  849:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  850:
    #####:  851:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  852:	{
    #####:  853:	  return -1;
        -:  854:	}
        -:  855:
    #####:  856:      if (choice2 > treasure_map || choice2 < curse)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:
    #####:  861:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      gainCard(choice2, state, 2, currentPlayer);
        -:  867:
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
        -:  870:
        -:  871:      //discard trashed card
    #####:  872:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  873:	{
    #####:  874:	  if (state->hand[currentPlayer][i] == j)
        -:  875:	    {
    #####:  876:	      discardCard(i, currentPlayer, state, 0);
    #####:  877:	      break;
        -:  878:	    }
        -:  879:	}
        -:  880:
    #####:  881:      return 0;
        -:  882:
        -:  883:    case remodel:
    #####:  884:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  885:
    #####:  886:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  887:	{
    #####:  888:	  return -1;
        -:  889:	}
        -:  890:
    #####:  891:      gainCard(choice2, state, 0, currentPlayer);
        -:  892:
        -:  893:      //discard card from hand
    #####:  894:      discardCard(handPos, currentPlayer, state, 0);
        -:  895:
        -:  896:      //discard trashed card
    #####:  897:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  898:	{
    #####:  899:	  if (state->hand[currentPlayer][i] == j)
        -:  900:	    {
    #####:  901:	      discardCard(i, currentPlayer, state, 0);
    #####:  902:	      break;
        -:  903:	    }
        -:  904:	}
        -:  905:
        -:  906:
    #####:  907:      return 0;
        -:  908:
        -:  909:    case smithy:
        1:  910:      return drawSmithy(currentPlayer, state, handPos);
        -:  911:
        -:  912:
        -:  913:    case village:
        1:  914:      return drawVillage(currentPlayer, state, handPos);
        -:  915:
        -:  916:
        -:  917:    case baron:
    #####:  918:      state->numBuys++;//Increase buys by 1!
    #####:  919:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  920:	int p = 0;//Iterator for hand!
    #####:  921:	int card_not_discarded = 1;//Flag for discard set!
    #####:  922:	while(card_not_discarded){
    #####:  923:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  924:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  925:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  926:	    state->discardCount[currentPlayer]++;
    #####:  927:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  928:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  929:	    }
    #####:  930:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  931:	    state->handCount[currentPlayer]--;
    #####:  932:	    card_not_discarded = 0;//Exit the loop
        -:  933:	  }
    #####:  934:	  else if (p > state->handCount[currentPlayer]){
        -:  935:	    if(DEBUG) {
        -:  936:	      printf("No estate cards in your hand, invalid choice\n");
        -:  937:	      printf("Must gain an estate if there are any\n");
        -:  938:	    }
    #####:  939:	    if (supplyCount(estate, state) > 0){
    #####:  940:	      gainCard(estate, state, 0, currentPlayer);
    #####:  941:	      state->supplyCount[estate]--;//Decrement estates
    #####:  942:	      if (supplyCount(estate, state) == 0){
    #####:  943:		isGameOver(state);
        -:  944:	      }
        -:  945:	    }
    #####:  946:	    card_not_discarded = 0;//Exit the loop
        -:  947:	  }
        -:  948:
        -:  949:	  else{
    #####:  950:	    p++;//Next card
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:
        -:  955:      else{
    #####:  956:	if (supplyCount(estate, state) > 0){
    #####:  957:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  958:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  959:	  if (supplyCount(estate, state) == 0){
    #####:  960:	    isGameOver(state);
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:
        -:  965:
    #####:  966:      return 0;
        -:  967:
        -:  968:    case great_hall:
    #####:  969:      drawGreatHall(currentPlayer, state, handPos);
        -:  970:
        -:  971:    case minion:
        -:  972:      //+1 action
    #####:  973:      state->numActions++;
        -:  974:
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
        -:  977:
    #####:  978:      if (choice1)		//+2 coins
        -:  979:	{
    #####:  980:	  state->coins = state->coins + 2;
        -:  981:	}
        -:  982:
    #####:  983:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  984:	{
        -:  985:	  //discard hand
    #####:  986:	  while(numHandCards(state) > 0)
        -:  987:	    {
    #####:  988:	      discardCard(handPos, currentPlayer, state, 0);
        -:  989:	    }
        -:  990:
        -:  991:	  //draw 4
    #####:  992:	  for (i = 0; i < 4; i++)
        -:  993:	    {
    #####:  994:	      drawCard(currentPlayer, state);
        -:  995:	    }
        -:  996:
        -:  997:	  //other players discard hand and redraw if hand size > 4
    #####:  998:	  for (i = 0; i < state->numPlayers; i++)
        -:  999:	    {
    #####: 1000:	      if (i != currentPlayer)
        -: 1001:		{
    #####: 1002:		  if ( state->handCount[i] > 4 )
        -: 1003:		    {
        -: 1004:		      //discard hand
    #####: 1005:		      while( state->handCount[i] > 0 )
        -: 1006:			{
    #####: 1007:			  discardCard(handPos, i, state, 0);
        -: 1008:			}
        -: 1009:
        -: 1010:		      //draw 4
    #####: 1011:		      for (j = 0; j < 4; j++)
        -: 1012:			{
    #####: 1013:			  drawCard(i, state);
        -: 1014:			}
        -: 1015:		    }
        -: 1016:		}
        -: 1017:	    }
        -: 1018:
        -: 1019:	}
    #####: 1020:      return 0;
        -: 1021:
        -: 1022:    case steward:
    #####: 1023:      if (choice1 == 1)
        -: 1024:	{
        -: 1025:	  //+2 cards
    #####: 1026:	  drawCard(currentPlayer, state);
    #####: 1027:	  drawCard(currentPlayer, state);
        -: 1028:	}
    #####: 1029:      else if (choice1 == 2)
        -: 1030:	{
        -: 1031:	  //+2 coins
    #####: 1032:	  state->coins = state->coins + 2;
        -: 1033:	}
        -: 1034:      else
        -: 1035:	{
        -: 1036:	  //trash 2 cards in hand
    #####: 1037:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1038:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1039:	}
        -: 1040:
        -: 1041:      //discard card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:      return 0;
        -: 1044:
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
        -: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1073:	}
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }
        -: 1081:
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1094:	  drawCard(currentPlayer, state);
    #####: 1095:	  drawCard(currentPlayer, state);
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
        -: 1108:	{
    #####: 1109:	  return -1;
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
        -: 1125:	{
    #####: 1126:	  return -1;
        -: 1127:	}
        -: 1128:
        -: 1129:      if (DEBUG)
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:    case cutpurse:
        -: 1163:
    #####: 1164:      updateCoins(currentPlayer, state, 2);
    #####: 1165:      for (i = 0; i < state->numPlayers; i++)
        -: 1166:	{
    #####: 1167:	  if (i != currentPlayer)
        -: 1168:	    {
    #####: 1169:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1170:		{
    #####: 1171:		  if (state->hand[i][j] == copper)
        -: 1172:		    {
    #####: 1173:		      discardCard(j, i, state, 0);
    #####: 1174:		      break;
        -: 1175:		    }
    #####: 1176:		  if (j == state->handCount[i])
        -: 1177:		    {
    #####: 1178:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1179:			{
        -: 1180:			  if (DEBUG)
        -: 1181:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1182:			}
    #####: 1183:		      break;
        -: 1184:		    }
        -: 1185:		}
        -: 1186:
        -: 1187:	    }
        -: 1188:
        -: 1189:	}
        -: 1190:
        -: 1191:      //discard played card from hand
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
        -: 1193:
    #####: 1194:      return 0;
        -: 1195:
        -: 1196:
        -: 1197:    case embargo:
        -: 1198:      //+2 Coins
    #####: 1199:      state->coins = state->coins + 2;
        -: 1200:
        -: 1201:      //see if selected pile is in play
    #####: 1202:      if ( state->supplyCount[choice1] == -1 )
        -: 1203:	{
    #####: 1204:	  return -1;
        -: 1205:	}
        -: 1206:
        -: 1207:      //add embargo token to selected supply pile
    #####: 1208:      state->embargoTokens[choice1]++;
        -: 1209:
        -: 1210:      //trash card
    #####: 1211:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1212:      return 0;
        -: 1213:
        -: 1214:    case outpost:
        -: 1215:      //set outpost flag
    #####: 1216:      state->outpostPlayed++;
        -: 1217:
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:      return 0;
        -: 1221:
        -: 1222:    case salvager:
        -: 1223:      //+1 buy
    #####: 1224:      state->numBuys++;
        -: 1225:
    #####: 1226:      if (choice1)
        -: 1227:	{
        -: 1228:	  //gain coins equal to trashed card
    #####: 1229:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1230:	  //trash card
    #####: 1231:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1232:	}
        -: 1233:
        -: 1234:      //discard card
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1236:      return 0;
        -: 1237:
        -: 1238:    case sea_hag:
    #####: 1239:      for (i = 0; i < state->numPlayers; i++){
    #####: 1240:	if (i != currentPlayer){
    #####: 1241:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1242:	  state->discardCount[i]++;
    #####: 1243:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1244:	}
        -: 1245:      }
    #####: 1246:      return 0;
        -: 1247:
        -: 1248:    case treasure_map:
    #####: 1249:      drawTreasureMap(currentPlayer, state, handPos, index);
        -: 1250:    }
        -: 1251:
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:
        -: 1258:  //if card is not trashed, added to Played pile
        2: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
       10: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:
        -: 1334:  //reset coin count
       10: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       60: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       50: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       39: 1342:	  state->coins += 1;
        -: 1343:	}
       11: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
       11: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}
        -: 1352:    }
        -: 1353:
        -: 1354:  //add bonus
       10: 1355:  state->coins += bonus;
        -: 1356:
       10: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
File 'dominion.c'
Lines executed:33.63% of 559
Branches executed:33.33% of 417
Taken at least once:24.22% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 315 returned 100% blocks executed 83%
      315:    8:int compare(const void* a, const void* b) {
      315:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      315:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       84:   12:    return -1;
      231:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 89%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
       21:  140:      state->deckCount[i] = 0;
       84:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       63:  143:	  state->deck[i][j] = estate;
       63:  144:	  state->deckCount[i]++;
        -:  145:	}
      168:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      147:  148:	  state->deck[i][j] = copper;
      147:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
       21:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       21:  166:      state->handCount[i] = 0;
       21:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 21 returned 100% blocks executed 94%
       21:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       21:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       21:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       21:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      252:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      210:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      210:  216:    newDeck[newDeckPos] = state->deck[player][card];
      210:  217:    newDeckPos++;
      734:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      524:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      210:  221:    state->deckCount[player]--;
        -:  222:  }
      231:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      210:  224:    state->deck[player][i] = newDeck[i];
      210:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       21:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 2 returned 100% blocks executed 100%
        2:  311:int numHandCards(struct gameState *state) {
        2:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 3 returned 100% blocks executed 100%
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1 returned 100% blocks executed 93%
        1:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        1:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:
        -:  355:  //Discard hand
        6:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        1:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        1:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        1:  370:  state->outpostPlayed = 0;
        1:  371:  state->phase = 0;
        1:  372:  state->numActions = 1;
        1:  373:  state->coins = 0;
        1:  374:  state->numBuys = 1;
        1:  375:  state->playedCardCount = 0;
        1:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
        6:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        1:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        1:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 56 returned 100% blocks executed 38%
       56:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       56:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       56:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       56:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       56:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       56:  576:    state->deckCount[player]--;
       56:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       56:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function drawAdventurer called 1 returned 100% blocks executed 67%
        1:  646:int drawAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int cardDrawn, int z) {
        4:  647:      while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  648:      //while(drawntreasure<3){
        2:  649:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  650:        shuffle(currentPlayer, state);
call    0 never executed
        -:  651:      }
        2:  652:      drawCard(currentPlayer, state);
call    0 returned 100%
        2:  653:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  654:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  655:        drawntreasure++;
        -:  656:      else{
    #####:  657:        temphand[z]=cardDrawn;
    #####:  658:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:        z++;
        -:  660:      }
        -:  661:      }
        2:  662:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  663:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  664:        z=z-1;
        -:  665:      }
        1:  666:      return 0;
        -:  667:}
        -:  668:
function drawSmithy called 1 returned 100% blocks executed 100%
        1:  669:int drawSmithy(int currentPlayer, struct gameState *state, int handPos) {
        -:  670:  //+3 Cards
        -:  671:  int i;
        -:  672:  //for (i = 1; i < 3; i++)
        4:  673:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  674:  {
        3:  675:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  676:  }
        -:  677:
        -:  678:  //discard card from hand
        1:  679:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  680:  return 0;
        -:  681:
        -:  682:}
        -:  683:
function drawVillage called 1 returned 100% blocks executed 100%
        1:  684:int drawVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  685:  //+1 Card
        1:  686:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  687:
        -:  688:  //+2 Actions
        -:  689:  //state->numActions = state->numActions + 2;
        1:  690:  state->numActions++;
        -:  691:
        -:  692:  //discard played card from hand
        1:  693:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  694:  return 0;
        -:  695:}
        -:  696:
function drawGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:int drawGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions++;
        -:  703:  //added a duplicate statement
    #####:  704:  state->numActions++;
        -:  705:  //discard card from hand
    #####:  706:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  707:  return 0;
        -:  708:}
        -:  709:
function drawTreasureMap called 0 returned 0% blocks executed 0%
    #####:  710:int drawTreasureMap(int currentPlayer, struct gameState *state, int handPos, int index) {
        -:  711:  //search hand for another treasure_map
    #####:  712:  index = -1;
        -:  713:  int i;
    #####:  714:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  715:{
    #####:  716:if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  717:  {
    #####:  718:    index = i;
    #####:  719:    break;
        -:  720:  }
        -:  721:}
    #####:  722:  if (index > -1)
branch  0 never executed
branch  1 never executed
        -:  723:{
        -:  724://trash both treasure cards
    #####:  725:discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  726:discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  727:
        -:  728://gain 4 Gold cards
    #####:  729:for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  730:  {
    #####:  731:    gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  732:  }
        -:  733:
        -:  734://return success
    #####:  735:return 1;
        -:  736:}
        -:  737:
        -:  738:  //no second treasure_map found in hand
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function cardEffect called 3 returned 100% blocks executed 4%
        3:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
        3:  749:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
        3:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
        3:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
        3:  756:  int z = 0;// this is the counter for the temp hand
        3:  757:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:
        -:  761:
        -:  762:  //uses switch to select card and perform actions
        3:  763:  switch( card )
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        1:  766:    return drawAdventurer(drawntreasure, state, currentPlayer, temphand, cardDrawn, z);
call    0 returned 100%
        -:  767:
        -:  768:    case council_room:
        -:  769:      //+4 Cards
    #####:  770:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  771:	{
    #####:  772:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  773:	}
        -:  774:
        -:  775:      //+1 Buy
    #####:  776:      state->numBuys++;
        -:  777:
        -:  778:      //Each other player draws a card
    #####:  779:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  782:	    {
    #####:  783:	      drawCard(i, state);
call    0 never executed
        -:  784:	    }
        -:  785:	}
        -:  786:
        -:  787:      //put played card in played card pile
    #####:  788:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  789:
    #####:  790:      return 0;
        -:  791:
        -:  792:    case feast:
        -:  793:      //gain card with cost up to 5
        -:  794:      //Backup hand
    #####:  795:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  796:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  797:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  798:      }
        -:  799:      //Backup hand
        -:  800:
        -:  801:      //Update Coins for Buy
    #####:  802:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  803:      x = 1;//Condition to loop on
    #####:  804:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  805:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  806:	  if (DEBUG)
        -:  807:	    printf("None of that card left, sorry!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  811:	  }
        -:  812:	}
    #####:  813:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  814:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  815:
        -:  816:	  if (DEBUG){
        -:  817:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  818:	  }
        -:  819:	}
        -:  820:	else{
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
    #####:  826:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  827:	  x = 0;//No more buying cards
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  831:	  }
        -:  832:
        -:  833:	}
        -:  834:      }
        -:  835:
        -:  836:      //Reset Hand
    #####:  837:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  838:	state->hand[currentPlayer][i] = temphand[i];
    #####:  839:	temphand[i] = -1;
        -:  840:      }
        -:  841:      //Reset Hand
        -:  842:
    #####:  843:      return 0;
        -:  844:
        -:  845:    case gardens:
    #####:  846:      return -1;
        -:  847:
        -:  848:    case mine:
    #####:  849:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  850:
    #####:  851:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  852:	{
    #####:  853:	  return -1;
        -:  854:	}
        -:  855:
    #####:  856:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:
    #####:  861:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  867:
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:
        -:  871:      //discard trashed card
    #####:  872:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  873:	{
    #####:  874:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  875:	    {
    #####:  876:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  877:	      break;
        -:  878:	    }
        -:  879:	}
        -:  880:
    #####:  881:      return 0;
        -:  882:
        -:  883:    case remodel:
    #####:  884:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  885:
    #####:  886:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  887:	{
    #####:  888:	  return -1;
        -:  889:	}
        -:  890:
    #####:  891:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  892:
        -:  893:      //discard card from hand
    #####:  894:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  895:
        -:  896:      //discard trashed card
    #####:  897:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  898:	{
    #####:  899:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  900:	    {
    #####:  901:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  902:	      break;
        -:  903:	    }
        -:  904:	}
        -:  905:
        -:  906:
    #####:  907:      return 0;
        -:  908:
        -:  909:    case smithy:
        1:  910:      return drawSmithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  911:
        -:  912:
        -:  913:    case village:
        1:  914:      return drawVillage(currentPlayer, state, handPos);
call    0 returned 100%
        -:  915:
        -:  916:
        -:  917:    case baron:
    #####:  918:      state->numBuys++;//Increase buys by 1!
    #####:  919:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  920:	int p = 0;//Iterator for hand!
    #####:  921:	int card_not_discarded = 1;//Flag for discard set!
    #####:  922:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  923:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  924:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  925:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  926:	    state->discardCount[currentPlayer]++;
    #####:  927:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  928:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  929:	    }
    #####:  930:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  931:	    state->handCount[currentPlayer]--;
    #####:  932:	    card_not_discarded = 0;//Exit the loop
        -:  933:	  }
    #####:  934:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  935:	    if(DEBUG) {
        -:  936:	      printf("No estate cards in your hand, invalid choice\n");
        -:  937:	      printf("Must gain an estate if there are any\n");
        -:  938:	    }
    #####:  939:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  941:	      state->supplyCount[estate]--;//Decrement estates
    #####:  942:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:		isGameOver(state);
call    0 never executed
        -:  944:	      }
        -:  945:	    }
    #####:  946:	    card_not_discarded = 0;//Exit the loop
        -:  947:	  }
        -:  948:
        -:  949:	  else{
    #####:  950:	    p++;//Next card
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:
        -:  955:      else{
    #####:  956:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  958:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  959:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:	    isGameOver(state);
call    0 never executed
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:
        -:  965:
    #####:  966:      return 0;
        -:  967:
        -:  968:    case great_hall:
    #####:  969:      drawGreatHall(currentPlayer, state, handPos);
call    0 never executed
        -:  970:
        -:  971:    case minion:
        -:  972:      //+1 action
    #####:  973:      state->numActions++;
        -:  974:
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  977:
    #####:  978:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  state->coins = state->coins + 2;
        -:  981:	}
        -:  982:
    #####:  983:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  984:	{
        -:  985:	  //discard hand
    #####:  986:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  987:	    {
    #####:  988:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:	    }
        -:  990:
        -:  991:	  //draw 4
    #####:  992:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  995:	    }
        -:  996:
        -:  997:	  //other players discard hand and redraw if hand size > 4
    #####:  998:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	    {
    #####: 1000:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1001:		{
    #####: 1002:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1003:		    {
        -: 1004:		      //discard hand
    #####: 1005:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1006:			{
    #####: 1007:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1008:			}
        -: 1009:
        -: 1010:		      //draw 4
    #####: 1011:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:			{
    #####: 1013:			  drawCard(i, state);
call    0 never executed
        -: 1014:			}
        -: 1015:		    }
        -: 1016:		}
        -: 1017:	    }
        -: 1018:
        -: 1019:	}
    #####: 1020:      return 0;
        -: 1021:
        -: 1022:    case steward:
    #####: 1023:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
        -: 1025:	  //+2 cards
    #####: 1026:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1027:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1028:	}
    #####: 1029:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
        -: 1031:	  //+2 coins
    #####: 1032:	  state->coins = state->coins + 2;
        -: 1033:	}
        -: 1034:      else
        -: 1035:	{
        -: 1036:	  //trash 2 cards in hand
    #####: 1037:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1038:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1039:	}
        -: 1040:
        -: 1041:      //discard card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1043:      return 0;
        -: 1044:
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
        -: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
        -: 1061:      }
        -: 1062:
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
        -: 1070:	  }
        -: 1071:
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1073:	}
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }
        -: 1081:
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
        -: 1091:	}
        -: 1092:
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:      }
        -: 1101:
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;
        -: 1127:	}
        -: 1128:
        -: 1129:      if (DEBUG)
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:		  break;
        -: 1156:		}
        -: 1157:	    }
        -: 1158:	}
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:    case cutpurse:
        -: 1163:
    #####: 1164:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1165:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1166:	{
    #####: 1167:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1168:	    {
    #####: 1169:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1170:		{
    #####: 1171:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1172:		    {
    #####: 1173:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1174:		      break;
        -: 1175:		    }
    #####: 1176:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1177:		    {
    #####: 1178:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1179:			{
        -: 1180:			  if (DEBUG)
        -: 1181:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1182:			}
    #####: 1183:		      break;
        -: 1184:		    }
        -: 1185:		}
        -: 1186:
        -: 1187:	    }
        -: 1188:
        -: 1189:	}
        -: 1190:
        -: 1191:      //discard played card from hand
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1193:
    #####: 1194:      return 0;
        -: 1195:
        -: 1196:
        -: 1197:    case embargo:
        -: 1198:      //+2 Coins
    #####: 1199:      state->coins = state->coins + 2;
        -: 1200:
        -: 1201:      //see if selected pile is in play
    #####: 1202:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1203:	{
    #####: 1204:	  return -1;
        -: 1205:	}
        -: 1206:
        -: 1207:      //add embargo token to selected supply pile
    #####: 1208:      state->embargoTokens[choice1]++;
        -: 1209:
        -: 1210:      //trash card
    #####: 1211:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1212:      return 0;
        -: 1213:
        -: 1214:    case outpost:
        -: 1215:      //set outpost flag
    #####: 1216:      state->outpostPlayed++;
        -: 1217:
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:
        -: 1222:    case salvager:
        -: 1223:      //+1 buy
    #####: 1224:      state->numBuys++;
        -: 1225:
    #####: 1226:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
        -: 1228:	  //gain coins equal to trashed card
    #####: 1229:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1230:	  //trash card
    #####: 1231:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //discard card
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1236:      return 0;
        -: 1237:
        -: 1238:    case sea_hag:
    #####: 1239:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1240:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1241:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1242:	  state->discardCount[i]++;
    #####: 1243:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1244:	}
        -: 1245:      }
    #####: 1246:      return 0;
        -: 1247:
        -: 1248:    case treasure_map:
    #####: 1249:      drawTreasureMap(currentPlayer, state, handPos, index);
call    0 never executed
        -: 1250:    }
        -: 1251:
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:
        -: 1258:  //if card is not trashed, added to Played pile
        2: 1259:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:
        -: 1334:  //reset coin count
       10: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       60: 1338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1339:    {
       50: 1340:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1341:	{
       39: 1342:	  state->coins += 1;
        -: 1343:	}
       11: 1344:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
       11: 1348:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}
        -: 1352:    }
        -: 1353:
        -: 1354:  //add bonus
       10: 1355:  state->coins += bonus;
        -: 1356:
       10: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
