        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function main called 1 returned 100% blocks executed 85%
        1:   10:int main() {
        -:   11:  struct gameState G;
        1:   12:  int count = 0;
        -:   13:  int i;
        1:   14:  int seed = 1000;
        1:   15:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   16:      sea_hag, tribute, smithy, council_room};
        1:   17:  int random_num_players = 0;
        1:   18:  int random_deck_size = 0;
        1:   19:  int random_hand_size = 0;
        1:   20:  int failed_num_action = 0;
        1:   21:  int failed_deck_count = 0;
        1:   22:  int failed_hand_count = 0;
        1:   23:  int failed_card_effect = 0;
        1:   24:  int a = 0;
        1:   25:  int player = 0; // current player
        1:   26:  srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   27:  // initialize a game state and player cards
        1:   28:  printf("----------------- Random Test #2: Village ----------------- \n");
call    0 returned 100%
        -:   29:  int c;
     1001:   30:  for (c = 0; c < 1000; c++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   31:    // get random values
     1000:   32:    random_num_players = (rand() % (MAX_PLAYERS-1) + 2); // randomize number of players 2-4
call    0 returned 100%
     1000:   33:    random_deck_size = (rand() % (MAX_DECK-2) + 3); // randomize deck size 3-500
call    0 returned 100%
     1000:   34:    random_hand_size = (rand() % (MAX_HAND-4) + 5); // randomize hand size 5-500
call    0 returned 100%
     1000:   35:    initializeGame(random_num_players, k, seed, &G);
call    0 returned 100%
     1000:   36:    player = (rand() % (random_num_players)); //random current player
call    0 returned 100%
        -:   37:    // store random values in current player
     1000:   38:    G.handCount[player] = random_hand_size;
     1000:   39:    G.whoseTurn = player;
     1000:   40:    G.deckCount[player] = random_deck_size;
        -:   41:
        -:   42:
        -:   43:    struct gameState testG;
     1000:   44:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:
        -:   46:    // test village
        -:   47:    // Check to see if cardEffect worked
     1000:   48:    a = cardEffect(village, 0, 0, 0, &testG, 0, 0);
call    0 returned 100%
     1000:   49:    if (a < 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   50:      failed_card_effect++;
        -:   51:    }
        -:   52:
        -:   53:    //check to see if one card has been added and one card has been discard
     1000:   54:    if(G.handCount[player] != testG.handCount[player]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   55:      failed_hand_count++;
        -:   56:    }
        -:   57:
        -:   58:    //check to see if two actions cards have been added (should be 1 extra after village is discarded)
     1000:   59:    if(G.numActions + 1 != testG.numActions) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   60:      failed_num_action++;
        -:   61:    }
        -:   62:
        -:   63:    //test to see if deck count failed should be one less
     1000:   64:    if(G.deckCount[player] - 1 != testG.deckCount[player]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:      failed_deck_count++;
        -:   66:    }
        -:   67:
        -:   68:  }
        -:   69:
        1:   70:  printf("Hand count failed: %d times after %d iterations\n", failed_hand_count, c);
call    0 returned 100%
        1:   71:  printf("Action card count failed: %d times after %d iterations\n", failed_num_action, c);
call    0 returned 100%
        1:   72:  printf("Deck count failed: %d times after %d iterations\n", failed_deck_count, c);
call    0 returned 100%
        1:   73:  printf("cardEffect() failed: %d times after %d iterations\n\n", failed_card_effect, c);
call    0 returned 100%
        -:   74:
        -:   75:
        1:   76:  return 0;
        -:   77:}
